Client Tools for the APS Alive System


Installation Notes
------------------

While this code supports the Alive Daemon, building the code does not
require that the Daemon be previously built on the target machine.

All the code is C, and requires no external libraries.  It build with
gcc, make, and ar.

Before building, some defaults need to be changed in the top-level
Makefile.  The first set of defaults are the standard installation
directories, typically modified by changing the "prefix" value; if you
don't plan to use "make" to install the files, you can ignore this.
Also, "Def_Server", and "Def_DB_Port" specify the default server IP
address (or name) and database TCP port for the user clients, which
are built into the programs.

Run "make" in the top-level directory, and an executable and library
will be created.  The executable, alivedb, is the main alive database
client, and is a command line program that fetches values over the
network.  The library, libaliveclient.a, is a static library that
comes with the alive_client.h C header file.

If you want to have make install the executable, library, and header
file, then run "make install".  The account running this must be able
to install into the locations specified in the Makefile.  To remove
them, similarly run "make uninstall".


Usage Notes
-----------

The network command line client "alivedb" can access all the useful
information the the database, and it uses the library API.  Here's its
help:

Usage: alivedb [-h] [-r (server)[:(port)] ] [-s | -e (var) | -p (param)]
       ( . | (ioc1) [ioc2] [...] | (-l|-d|-c) (ioc) )
Prints out information from alive database.
To print entire database, give '.' as an argument.
  -h  Show this help screen.
  -v  Show version.
  -r  Set the remote host and optionally the port.
  -l  Print out event list for the specified IOC.
  -d  Print out debug information for the specified IOC.
  -c  Print out conflict information for the specified IOC.
  -s  Print out only status information.
  -e  Print out only the environment variable specified.
  -p  Print out only the operating system specific parameter specified.
      Parameter is of form os:parameter
        vxworks: boot_device, unit_number, processor_number, boot_host_name,
          boot_file, address, backplane_address, boot_host_address,
          gateway_address, flags, target_name, startup_script, other
        linux: user, group, hostname
        darwin: user, group, hostname
        windows: user, machine

It can generate a listing of varying amounts of information for all
IOCS (using ".") or some of them (by specifying their names).  It can
also return all the events for an IOC (read from the events directory
for that IOC). It can print out the value of an environment variable
or a operating system parameter (for use in scripts).

The states for an IOC is up, down, conflict, or unknown (right after
the daemon is started).


